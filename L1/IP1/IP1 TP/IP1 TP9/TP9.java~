import java.util.Random ;

public class TP9 {

    public static Random rand = new Random ();
    
    public static int randRange (int a, int b){
	return rand . nextInt (b-a)+a;
    }

    public static int [][] gridComp = new int [10][10];
    public static int [][] gridPlay = new int [10][10];

    public static boolean posOk (int [][] grille , int l, int c, int d, int t){
	boolean b=false;
	if (d==1 && c+t<10){
	    b=true;
	    for(int i=0; i<t; i++){
		if(grille[l+i][c+i]!=0){
		    b=false;
		}
	    }
	}
	else if (d==2 && l+t<10){
	    b=true;
	    for(int i=0; i<t; i++){
		if(grille[l+i][c+i]!=0){
		    b=false;
		}
	    }
	}
	return b;
    }

    public static void initGridComp (){
	int l=randRange(0,10);
	int c=randRange(0,10);
	int d=randRange(1,3);
	int[]bateaux={5,4,3,3,2};
	for(int i=0; i<bateaux.length; i++){
	    while(!posOk(gridComp,l,c,d,bateaux[i])){
		l=randRange(0,10);
		c=randRange(0,10);
		d=randRange(1,3);
	    }
	    for(int j=0; j<bateaux[i]; j++){
		if(d==1){
		    gridComp[l][c+j]=bateaux[i];
		}
		else{
		    gridComp[l+j][c]=bateaux[i];
		}
	    }
	}
    }

    public static void printGrid(int[][]grille){
	System.out.println("   A B C D E F G H I J");
	for(int i=1; i<11; i++){
	    System.out.print(i);
	    for(int j=0; j<10; j++){
		System.out.print(grille[i-1][j]);
	    }
	    System.out.println();
	}
    }
    

    ////////////////////////////////////////////////////////////////////////
    public static void main (String[] args) {
	initGridComp();
	printGrid(gridComp);
	
    }

    ////////////////////////////////////////////////////////////////////////

    public static int minArray(int[] arr) {
	int min = 0;
	for (int i = 0; i < arr.length; i++) {
	    if (arr[i] < min) {
		min = arr[i];
	    }
	}
	return min;
    }

    public static int[] initArray(int i) {
	int[] arr = new int[i-1];
	for (int j = 0; j < arr.length; j++) {
	    arr[i] = j+1;
	}
	return arr;
    }

    public static int dichotomicSearch(int[] arr, int i) {
	int min = 0;
	int max = arr.length;
	int pos = (min + max) / 2;

	while (min != max) {
	    if (arr[pos] < i) {
		min = pos;
	    } else if (arr[pos] > i) {
		max = pos;
	    } else {
		return pos;
	    }
	}
	return -1;
    }

    public static boolean forallNotEmpty(String[] arr) {
	boolean b = false;
	for (int i = 0; i < arr.length; i++) {
	    if (!"".equals(arr[i])) {
		b = true;
	    }
	}
	return b;
    }

    public static boolean existsPositiveLine(int[][] arr) {
	for (int i = 0; i < arr.length; i++) {
	    boolean b = false;
	    for (int j = 0; j < arr[i].length; j++) {
		if (arr[i][j] >= 0) {
		    b = true;
		}
	    }
	    if (!b) {
		return false;
	    }
	}
	return true;
    }

}


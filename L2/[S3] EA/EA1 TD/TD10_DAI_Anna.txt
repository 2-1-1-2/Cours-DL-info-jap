public class TD10 {
    static class ArbreBinaire{  //classe interne
        Noeud racine;

        ArbreBinaire(Noeud r){
            racine=r;
        }
    }  //fin classe interne ArbreBinaire
    
    static class Noeud{  //classe interne
        Noeud gauche;
        Noeud droit;

        Noeud(Noeud g, Noeud d){
            gauche=g;
            droit=d;
        }
    }  //fin classe interne Noeud
    
    //5.
    static String canop(ArbreBinaire t){
        return canopInt(t.racine);
        //Au lieu d'écrire t.racine.gauche et t.racine.droit à chaque fois,
        //on passe par une fonction intermédiaire 
    }
    
    static String canopInt(Noeud r){
        if(r.gauche!=null && r.droit!=null) 
            return canopInt(r.gauche)+canopInt(r.droit);
        else if(r.gauche!=null) return canopInt(r.gauche)+"1";
        else if(r.droit!=null) return "0"+canopInt(r.droit);
        return "01";
    }
    
    //6.
    static int valAbs(int x){
        return (x>0)?x:-x;
    }
    
    static int max(int x, int y){
        return (x>y)?x:y;
    }
    
    static int hauteur(Noeud r){
        if(r.gauche!=null && r.droit!=null)
            return 1+max(hauteur(r.gauche), hauteur(r.droit));
        else if(r.gauche!=null) return 1+hauteur(r.gauche);
        else if(r.droit!=null) return 1+hauteur(r.droit);
        return 1;
    }
    
    static boolean est_equilibre(ArbreBinaire t){
        return estEquilibreInt(t.racine);
    }
    
    static boolean estEquilibreInt(Noeud r){
        if(r.gauche!=null && r.droit!=null){
            return (valAbs(hauteur(r.gauche)-hauteur(r.droit))<=1 
                    && estEquilibreInt(r.gauche) && estEquilibreInt(r.droit));
        }
        else if(r.gauche!=null) return hauteur(r.gauche)<=1;
        else if(r.droit!=null) return hauteur(r.droit)<=1;
        return true;
    }
    
    public static void main(String[]a){
        //5.
        Noeud n7=new Noeud(null, null);
        Noeud n6=new Noeud(null, null);
        Noeud n5=new Noeud(null, n7);
        Noeud n4=new Noeud(null, null);
        Noeud n3=new Noeud(null, n6);
        Noeud n2=new Noeud(n4, n5);
        Noeud n1=new Noeud(n3, null);
        Noeud n0=new Noeud(n1, n2);
        ArbreBinaire t1=new ArbreBinaire(n0);  //l'arbre de la feuille
        System.out.println(canop(t1));  //001101001
        
        //6.
        System.out.println(est_equilibre(t1));  //false
        
        Noeud m3=new Noeud(null, null);
        Noeud m2=new Noeud(null, null);
        Noeud m1=new Noeud(m3, null);
        Noeud m0=new Noeud(m1, m2);
        ArbreBinaire t2=new ArbreBinaire(m0);
        /*Avec "." qui représente null :
                 0
              1     2
             3 .   . .
            ..
        */
        System.out.println(est_equilibre(t2));  //true
    }
}
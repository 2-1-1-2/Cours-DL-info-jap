import java.util.*;

public class TriFusion {

    protected static <E extends Comparable<? super E>> List<E> fusion(List<E> l1, List<E> l2) {
        // ArrayList plut√¥t que LinkedList (pour get en temps constant)
        List<E> l3 = new ArrayList<>(l1.size() + l2.size());
        ListIterator<E> it1 = l1.listIterator(), it2 = l2.listIterator();
        while (it1.hasNext() || it2.hasNext()) 
            if (it1.hasNext() 
                && (!it2.hasNext() 
                    || l1.get(it1.nextIndex()).compareTo(l2.get(it2.nextIndex())) < 0))
                l3.add(it1.next());
            else l3.add(it2.next());
        return l3;
    }

    public static <E extends Comparable<? super E>> List<E> triMonoThread(List<E> l) {
        if (l.size() <= 1) return l;
        else {
            int pivot = Math.floorDiv(l.size(), 2);
            List<E> l1 = triMonoThread(l.subList(0, pivot));
            List<E> l2 = triMonoThread(l.subList(pivot, l.size()));
            return fusion(l1, l2);
        }
    }

    public static void main(String[] args) {
        // doit afficher : [1, 2, 12, 81, 99, 122, 122, 234, 2134]
        System.out.println(triMonoThread(Arrays.asList(234,2134,1,122,122,2,99,12, 81)));
    }
}
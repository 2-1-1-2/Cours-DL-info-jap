<!DOCTYPE html>
<html>
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=UTF-8">
  <title>Optimisation Combinatoire: TD 2</title>
  <style type="text/css">
    .blue { color: #0000ff }
    .xslt { color: #116611 }
    .cc { color: #116611 }
    .html { color: #882222 }
    .xml { color: #116611 }
    .red { color: #ff0000 }
    .orange { color: #ff8800 }
    .pink { color: #ff00ff }
    .grey { color: #555555 }
    .hidden { color: #ffffff }
    .bigsep { width: 50px }
    .verticalline { border-left: solid #000000; }
    .framed { border: solid #000000; }
    .footnote { }
    pre { color: #116611 }
    tt { color: #116611 }
  </style>
  <!-- Google Analytics -->
  <script type="text/javascript" async="" src="../../ga.js"></script>
  <script type="text/javascript">
  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-20097933-1']);
  _gaq.push(['_trackPageview']);
  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();
  </script>
  <!-- Syntax highlighting -->
  <link type="text/css" rel="stylesheet" href="../../highlight/styles/googlecode.css">
  <script type="text/javascript" src="../../highlight/highlight.pack.js"></script>
  <script type="text/javascript">hljs.initHighlightingOnLoad();</script>
</head>
<body>

<a href="index.en.html"><img src="../uk_flag.svg" height="20px" alt="UK Flag" style="vertical-align: text-top;"></a>
<a href="index.en.html">English version</a>

<h2>TD 2: BFS. Dijkstra.</h2>

<h3>Rappels</h3>
<ul>
<li><a href="../rendu.html">Procédure de rendu</a></li>
<li><a href="../cours/1.html">Cours 1</a></li>
<li>Heure limite de rendu du TD2: <b class="pink">Dimanche soir 23h59 (le 16 janvier)</b>.</li>
</ul>

<hr>
<h3>Exercice 1: BFS</h3>
<ol>
  <li>
    <b>Reprenez</b> les fichiers <tt>graph.h</tt>, <tt>graph.cc</tt>, <tt>ugraph.h</tt> et <tt>ugraph.cc</tt>
    faits lors du <a href="../td1/index.htm">TD 1</a>.
    <br>
    <b>Implémentez</b> dans un fichier <tt>bfs.1.cc</tt> la fonction <tt>BFS()</tt> décrite dans le fichier <a href="bfs.1.h" download="">bfs.1.h</a>:
    <pre><code class="c++">#include "ugraph.h"

// Runs a Breadth-First-Search on the graph, starting from node "src".
// See https://en.wikipedia.org/wiki/Breadth-first_search .
// Returns a vector of size N (N is the number of nodes of the
// graph) representing the "parent" tree: parent[i] is the parent of
// node #i in the BFS tree. The parent of "src" is itself, and the
// parent of a node that wasn't reached by the BFS exploration is -1.
vector&lt;int&gt; BFS(const UndirectedGraph&amp; graph, int src);</code></pre>
    La complexité devra être O(M + N), où M est le nombre d'arcs et N le nombre de noeuds.
    
    <br><br> Utilisez une file de priorité <tt>deque</tt> de la librairie standard (<tt>#include &lt;deque&gt;</tt>). Les méthodes dont vous avez besoin sont :
    <ul>
      <li> <tt>file.empty()</tt>: tester si la file est vide </li>
      <li> <tt>file.front()</tt>: renvoyer la tête de file </li>
      <li> <tt>file.push_back(elt)</tt>: ajouter un élément en fin de file </li>
      <li> <tt>file.pop_front()</tt>: retirer la tête de file </li>
    </ul>
    <br><br><b>Test</b>:
    <pre>rm test.tar.gz; wget --no-cache <a href="test.tar.gz" download="">http://fabien.viger.free.fr/oc/td2/test.tar.gz</a>
tar xf test.tar.gz
make bfs.1</pre>
    <b class="orange">RENDU</b>: <tt>bfs.1.cc</tt>
    <br><br>
  </li>
  <li>
    Implémentez la fonction <tt>GetBfsDistances()</tt> décrite dans le fichier <a href="bfs.2.h" download="">bfs.2.h</a>:
    <pre><code class="c++">#include &lt;vector&gt;
using std::vector;

// Extracts the distances of each node in the given BFS tree, which
// is the returned format described in bfs.1.h
// Eg. in the following tree, whose root is "2":
//
//         .---- 4
//         v
//   2 &lt;-- 3 &lt;-- 1
//   ^
//   '---- 0 &lt;-- 5
//
// The bfs tree is represented by the following 'parent' vector:
// [2, 3, 2, 2, 3, 0]
// And the distance vector should be:
// [1, 2, 0, 1, 2, 2]
//
// If a node was not reached by the BFS, its parent is -1, and its distance
// should also be -1.
vector&lt;int&gt; GetBfsDistances(const vector&lt;int&gt;&amp; parents);</code></pre>
    Comment faire pour obtenir une complexité de O(N), où N le nombre de noeuds ?
    <br><br><b>Test</b>: <tt>make bfs.2</tt>
    <br><b class="orange">RENDU</b>: <tt>bfs.2.cc</tt>
    <br><br>
  </li>
  <li>
    Implémentez la fonction <tt>GetShortestPathFromRootedTree()</tt>
    décrite dans le fichier <a href="bfs.3.h" download="">bfs.3.h</a>:
    <pre><code class="c++">#include &lt;vector&gt;
using std::vector;

// Returns the shortest path, from the source of a BFS to the given target node.
// The argument is the target node and the BFS "parent" tree.
// If the target node was not reached by the BFS, the returned path should be
// empty.
// Example: using the same example as in bfs.2.h, with BFS 'parent' tree:
// [2, 3, 2, 2, 3, 0]
// Then:
// - the shortest path to node #4 should be: [2, 3, 4]
// - the shortest path to node #0 should be: [2, 0]
// - the shortest path to node #5 should be: [2, 0, 5]
// - the shortest path to node #2 should be: [2]
vector&lt;int&gt; GetShortestPathFromRootedTree(const vector&lt;int&gt;&amp; parent, int target);</code></pre>
    Vous pourriez avoir besoin de la fonction <tt>reverse</tt> (<tt>#include &lt;algorithm&gt;</tt>) qui renverse l'ordre des éléments d'un vecteur : <tt>reverse(vec.begin(), vec.end())</tt>

    <br><br><b>Test</b>: <tt>make bfs.3</tt>
    <br><b class="orange">RENDU</b>: <tt>bfs.3.cc</tt>
    <br><br>
  </li>
</ol>

<hr>
<h3>Exercice 2: Dijkstra</h3>
<ol>
  <li>
    Copiez <tt>graph.h</tt> et <tt>graph.cc</tt> dans <tt>vgraph.h</tt> et <tt>vgraph.cc</tt>,
    et modifiez la fonction <tt>AddArc()</tt> pour qu'elle prenne un argument
    supplémentaire: <tt>double length</tt>.
    <br>Modifiez également la fonction <tt>Neighbors()</tt> pour qu'elle renvoie
    un <tt>const vector&lt;pair&lt;int, double&gt;&gt;&amp;</tt>.
    <br>Ne reprenez pas la fonction <tt>MakeSimple()</tt>.
    <br><br><b>Test</b>: <tt>make vgraph</tt>
    <br><b class="orange">RENDU</b>: <tt>vgraph.h</tt> et <tt>vgraph.cc</tt>
    <br><br>
  </li>
  <li>
    <b>(**)</b>
    Implémentez la fonction <tt>Dijkstra()</tt>
    décrite dans le fichier <a href="dijkstra.h" download="">dijkstra.h</a>:
    <pre><code class="c++">#include "vgraph.h"

// Runs a Dijkstra search on the graph, starting from node "src".
// See https://en.wikipedia.org/wiki/Dijkstra%27s_algorithm .
// Returns the same "parent" vector as BFS() in bfs.1.h.
vector&lt;int&gt; Dijkstra(const DirectedGraph&amp; graph, int src);</code></pre>
    On utilisera <tt>priority_queue&lt;&gt;</tt> sur une <tt>struct</tt>
    qu'on définira, qui correspond à un noeud du graph associé à sa
    distance depuis la source, assorti d'un opérateur <tt><b>&lt;</b></tt>
    adapté à ce qu'on en veut pour la <tt>priority_queue</tt>.
    <br>La complexité devra être O(N + M log(M)).
    <br><b>Test</b>: <tt>make dijkstra</tt>
    <br><b class="orange">RENDU</b>: <tt>dijkstra.cc</tt>
    <br><br>
  </li>
</ol>

<footer>
N'oubliez pas de <a href="../rendu.html">soumettre votre travail</a>, <b class="red">après l'avoir testé</b>.
</footer>
</body>
</html>

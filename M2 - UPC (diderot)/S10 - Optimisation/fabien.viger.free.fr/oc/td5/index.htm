<!DOCTYPE html>
<html>
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=UTF-8">
  <title>Optimisation Combinatoire: TD 5</title>
  <style type="text/css">
    .blue { color: #0000ff }
    .xslt { color: #116611 }
    .cc { color: #116611 }
    .html { color: #882222 }
    .xml { color: #116611 }
    .red { color: #ff0000 }
    .orange { color: #ff8800 }
    .pink { color: #ff00ff }
    .grey { color: #555555 }
    .hidden { color: #ffffff }
    .bigsep { width: 50px }
    .verticalline { border-left: solid #000000; }
    .framed { border: solid #000000; }
    .footnote { }
    pre { color: #116611 }
    tt { color: #116611 }
  </style>
  <!-- Google Analytics -->
  <script type="text/javascript" async="" src="../../ga.js"></script>
  <script type="text/javascript">
  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-20097933-1']);
  _gaq.push(['_trackPageview']);
  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();
  </script>
  <!-- Syntax highlighting -->
  <link type="text/css" rel="stylesheet" href="../../highlight/styles/googlecode.css">
  <script type="text/javascript" src="../../highlight/highlight.pack.js"></script>
  <script type="text/javascript">hljs.initHighlightingOnLoad();</script>
</head>
<body>

<a href="index.en.html"><img src="../uk_flag.svg" height="20px" alt="UK Flag" style="vertical-align: text-top;"></a>
<a href="index.en.html">English version</a>

<h2>TD 5: Algorithmes Gloutons</h2>

<h3>Rappels</h3>
<ul>
<li><a href="../cours/5.html">Page du Cours 5</a></li>
<li><a href="../rendu.html">Procédure de rendu</a></li>
<li>Heure limite de rendu du TD: <b class="pink">ce soir à 23h59</b>.</li>
<li> Pour exécuter les tests : téléchargez <a href="test.tar.gz" download=""><tt>test.tar.gz</tt></a> et décompressez-le dans votre répertoire de travail </li>
</ul>


<hr>
<h3>Exercice 1: Sac à dos</h3>
<ol>
  <li>
    Vous avez un sac à dos de capacité <b>C</b> (en poids) et une liste de <b>n</b> objets de poids
    <tt>p[0]</tt>, <tt>p[1]</tt>, ... <tt>p[n-1]</tt>.
    <br>Votre but: mettre le plus possible d'objets dans votre sac à dos, sans dépasser la capacité.
    <br>
    <br><b>Implémentez</b> dans un fichier <tt>sac1.cc</tt> la fonction <tt>Sac1()</tt> décrite dans le fichier <a href="sac1.h" download="">sac1.h</a>:
    <pre><code class="c++">#ifndef __SAC1_H
#define __SAC1_H

#include &lt;vector&gt;
using namespace std;

// On a un sac à dos de capacité C, et des objets de poids p[0], p[1], ...
// On veut selectionner le plus grand nombre possible d'objets tel que
// la somme de leurs poids soit &lt;= C.
// Cette fonction renvoie ce nombre maximal d'objets.
//
// EXEMPLE: C=12, p=[4, 7, 2, 5, 5, 1, 10]
//          -&gt; renvoie 4 car on peut mettre 4 objets au maximum
//             (de poids 4, 2, 5, 1: 4+2+5+1 = 12)
int Sac1(int C, const vector&lt;int&gt;&amp; p);

#endif  // __SAC1_H</code></pre>
    <b>Test</b>:
    <pre>rm test.tar.gz; wget --no-cache <a href="test.tar.gz" download="">http://fabien.viger.free.fr/oc/td5/test.tar.gz</a>
tar xf test.tar.gz
make sac1</pre>
    <b class="orange">RENDU</b>: <tt>sac1.cc</tt>
    <br><br>
  </li>
  <li>
    À présent, les objets sont <b>valués</b> (<tt>v[0]</tt>, <tt>v[1]</tt>, ...)
    et peuvent être pris de manière <b>fractionnaire</b>:
    <br>pour chaque object, vous pouvez choisir d'en mettre une fraction (un nombre dans [0, 1]) dans le sac à dos:
    <br>vous gagnerez la fraction correspondante de sa valeur, tout en occupant la fraction correspondante de son poids.
    <br><br>Quels objets (avec quelles fractions) choisir pour maximiser la valeur transportée dans
    le sac à dos?
    <br><br><b>Implémentez</b> dans un fichier <tt>sac2.cc</tt> la fonction <tt>Sac2()</tt> décrite dans le fichier <a href="sac2.h" download="">sac2.h</a>:
    <pre><code class="c++">#ifndef __SAC2_H
#define __SAC2_H

#include &lt;vector&gt;
using namespace std;

// On a un sac à dos de capacité C, et des objets de poids p[0], p[1], ...
// et de valeurs v[0], v[1], ...
// Cette fonction renvoie la valeur maximale que l'on peut collecter dans le sac
// à dos, en supposant qu'on peut mettre les objets de manière fractionnaire.
//
// EXEMPLE: C=12, p=[4, 7, 2, 5, 5, 1, 10], v=[3.1, 99, 0.1, 0.2, 6.6, 0.4, 111]
// -&gt; Doit renvoyer 154.5. Explication:
//    la solution optimale est de prendre l'objet #1 en entier (poids 7, valeur 99)
//    et la moitié de l'objet #6 (poids 10, valeur 111).
//    On a bien un poids total de 7*1 + 10*0.5 = 12.
//    On obtient une valeur totale de 99*1 + 111*0.5 = 154.5
double Sac2(int C, const vector&lt;int&gt;&amp; p, const vector&lt;double&gt;&amp; v);

#endif  // __SAC2_H</code></pre>
    <b>Test</b>: <tt>make sac2</tt>
    <br><br><b class="orange">RENDU</b>: <tt>sac2.cc</tt>
    <br><br>
  </li>
</ol>

<hr>
<h3>Exercice 2: Arbre couvrant minimal</h3>
<table><tr>
<td>
<ol>
  <li>
    <b>Implémentez</b> dans un fichier <tt>prim.cc</tt> l'algorithme de Prim pour trouver un arbre couvrant minimal: <tt>Prim()</tt>, décrite dans le fichier <a href="prim.h" download="">prim.h</a>:
    <pre><code class="c++">#ifndef __PRIM_H
#define __PRIM_H

#include &lt;vector&gt;
using namespace std;

// Renvoie le poids de l'arbre couvrant minimal pour le graphe valué donné:
// N est le nombre de sommets, et "edges" liste toutes les arêtes du graphe,
// avec leur poids.
//
// EXEMPLE: N = 4, edges = [{0, 1, 23}, {1, 3, 13}, {2, 1, 6}, {3, 2, 11}, {0, 2, 41}]
//
//    .--[23]--1--[13]--.      Les noeuds sont 0,1,2,3.
//  .´         |         `.    Les poids des arêtes sont entre [ ].
// 0          [6]          3
//  `.         |         .´    Arbre couvrant minimal: 23 + 6 + 11 = 40.
//    `--[41]--2--[11]--´
//
struct Edge {
  int node1;
  int node2;
  int weight;
};
int Prim(int N, const vector&lt;Edge&gt;&amp; edges);

#endif  // __PRIM_H
</code></pre>
    <b>Test</b>: <tt>make prim</tt>
    <br><br><b class="orange">RENDU</b>: <tt>prim.cc</tt>
    <br><br>
  </li>
</ol>
</td>
<td>&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td><img src="arbre_couvrant.png" width="240" height="194"></td>
</tr></table>

<hr>
<h3>Exercice 3: Coloration de sommets dans un graphe</h3>
<table><tr>
<td>
<ol>
  <li>
    Vous êtes à ma place, et devez donner un devoir à la maison à vos étudiants.
    <br>Problème: ils copient entre eux.
    <br>Vous êtes prêts à préparer plusieurs versions de votre devoir: 2 étudiants ayant 2 versions différentes ne pourront pas copier entre eux.
    <br>Vous connaissez également le réseau social des étudiants: 2 étudiants essaieront de copier entre eux seulement s'ils sont amis dans ce réseau (directement reliés).
    <br>Comment faire pour donner une version du devoir à chacun, en minimisant le nombre total de versions, et en ne donnant jamais la même version à 2 amis?
    <br><br><b>Implémentez</b> dans un fichier <tt>color.cc</tt> la fonction <tt>Color()</tt>, décrite dans le fichier <a href="color.h" download="">color.h</a>:
    <pre><code class="c++">#ifndef __COLOR_H
#define __COLOR_H

#include &lt;vector&gt;
#include "ugraph.h"  // Vous l'avez: il était dans test.tar.gz.

using namespace std;

// Étant donné un graph non dirigé, renvoie un coloriage utilisant
// aussi peu de couleurs que possible.
// Entrée: le graphe non dirigé.
// Valeur de retour: le nombre de couleur C de votre coloriage.
// Sortie: "color" doit contenir autant d'élément que le nombre de noeuds
//         du graphe: color[i] sera la couleur du noeud #i.
//         color[i] doit etre entre 0 et C-1, et deux noeuds ayant une
//         arête en commun ne peuvent pas avoir la même couleur.
//
// NOTE: On attends pas un algorithme optimal (NP complet!), mais votre
// heuristique devra etre aussi "bonne" que possible.
int Color(const UndirectedGraph&amp; graph,
          vector&lt;int&gt;* color);  // La sortie. N'oubliez pas de la remplir!

#endif  // __COLOR_H</code></pre>
    <b>Test</b>: <tt>make color</tt>
    <br><br><b class="orange">RENDU</b>: <tt>color.cc</tt>
    <br><br>
  </li>
</ol>
</td>
<td>&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td><img src="graph_coloring.png" width="240" height="213"></td>
</tr></table>

<footer>
N'oubliez pas de <a href="../rendu.html">soumettre votre travail</a>, <b class="red">après l'avoir testé</b>.
</footer>
</body>
</html>
